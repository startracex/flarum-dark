{"version":3,"file":"admin.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,wJCLvD,IAAMC,EAAY,yBCGZC,EAAqBD,EAAS,UCH/BE,EAAK,SAALA,GAAK,OAALA,EAAK,YAALA,EAAK,cAALA,EAAK,YAALA,CAAK,MAMJC,EAAa,QAEGf,OAAOgB,OAAOF,GCR3C,MAAM,EAA+BG,OAAOC,KAAKC,OAAO,c,aCU3CC,EAAmD,WAC9D,OAAqB,MAAjBC,OAAOC,YAAPD,OAAOC,WAAa,gCAAgCC,QAC/CT,EAAMU,KAERV,EAAMW,KACf,EAMaC,EAAsC,WAAM,IAAAC,EACvD,OAAkB,OAAXA,EAAAC,IAAAA,UAAiB,OAAND,EAAXA,EAAaE,OAAmB,OAAfF,EAAjBA,EAAmBG,oBAAa,EAAhCH,EAAmCf,KAAcmB,aAAaC,QAAQjB,EAC/E,EAMakB,EAAc,WACzB,IAAMC,EAAIR,IACV,OAAKQ,GAAKA,IAAMpB,EAAMqB,KAGfD,EAFEd,GAGX,EAOagB,EAAY,SAACC,GACxB,OAAUzB,EAAS,WAAWyB,CAChC,EAMaC,EAAW,SAACD,GACnBA,IAAMvB,EAAMqB,OACdE,EAAIjB,KAEN,IAAImB,EAAOC,SAASC,cAAa,wBAC5BF,KACHA,EAAOC,SAASE,cAAc,SACzBC,IAAM,aACXJ,EAAKK,UAAUC,IAAI,mBACnBL,SAASM,KAAKC,YAAYR,IAE5BA,EAAKS,KAAOpB,IAAAA,KAASQ,EAAUC,IAE/B,IAAMY,EAAcT,SAASC,cAA+B,6BAE5D,GAAIQ,EACFA,EAAYC,QAAUb,MACjB,CACL,IAAMc,EAAOX,SAASE,cAAc,QACpCS,EAAKC,KAAO,eACZD,EAAKD,QAAUb,EACfG,SAASM,KAAKC,YAAYI,EAC5B,CAEAX,SAASa,gBAAgBC,aAAa,aAAcjB,EACtD,EAOakB,EAAc,SAAClB,EAAUR,GAG1B,IAAA2B,EAFVzB,aAAa0B,QAAQ1C,EAAYsB,GACjCG,SAASkB,cAAc,IAAIC,YAAY9C,EAAiB,CAAE+C,OAAQvB,KAC9DR,EACFA,EACGgC,iBAAeL,EAAA,GAAAA,EACb5C,GAAYyB,EAACmB,IAEfM,MAAK,WACJxB,EAASD,EACX,IAEFC,EAASD,EAEb,EChGA,MAAM,EAA+BpB,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,0B,cCIxD4C,EAAAA,EAAAA,QAAOC,IAAAA,UAAgB,UAAU,WAC/B1B,EAASL,IACX,G","sources":["webpack://@startracex/flarum-dark/webpack/bootstrap","webpack://@startracex/flarum-dark/webpack/runtime/compat get default export","webpack://@startracex/flarum-dark/webpack/runtime/define property getters","webpack://@startracex/flarum-dark/webpack/runtime/hasOwnProperty shorthand","webpack://@startracex/flarum-dark/webpack/runtime/make namespace object","webpack://@startracex/flarum-dark/./src/common/id.ts","webpack://@startracex/flarum-dark/./src/common/event.ts","webpack://@startracex/flarum-dark/./src/common/theme.ts","webpack://@startracex/flarum-dark/external root \"flarum.core.compat['common/app']\"","webpack://@startracex/flarum-dark/./src/common/index.ts","webpack://@startracex/flarum-dark/external root \"flarum.core.compat['common/extend']\"","webpack://@startracex/flarum-dark/external root \"flarum.core.compat['common/components/Page']\"","webpack://@startracex/flarum-dark/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const packageID = 'startracex-flarum-dark';\n","import { packageID } from './id';\nimport type { Theme } from './theme';\n\nexport const changeEventName = `${packageID}-change`;\n\ndeclare global {\n  interface DocumentEventMap {\n    [changeEventName]: ThemeChangeEvent;\n  }\n}\n\nexport interface ThemeChangeEvent {\n  detail: Theme;\n}\n","export enum Theme {\n  AUTO = 'auto',\n  LIGHT = 'light',\n  DARK = 'dark',\n}\n\nexport const storageKey = 'Theme';\n\nconst themeValues: Theme[] = Object.values(Theme);\n\n/**\n * Loop through the themes.\n * Auto -> Light -> Dark -> Auto.\n */\nexport const nextTheme: (theme?: Theme) => Theme = (theme?: Theme) => {\n  if (!theme) {\n    return Theme.LIGHT;\n  }\n  const index = themeValues.indexOf(theme);\n  return themeValues[(index + 1) % themeValues.length] as Theme;\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/app'];","import { changeEventName } from './event';\nimport { packageID } from './id';\nimport { Theme, storageKey } from './theme';\nimport app from 'flarum/common/app';\nimport type User from 'flarum/common/models/User';\n\n/**\n * Media preferences theme.\n * @returns Light or Dark.\n */\nexport const mediaPreferences: () => Theme.DARK | Theme.LIGHT = () => {\n  if (window.matchMedia?.('(prefers-color-scheme: dark)').matches) {\n    return Theme.DARK;\n  }\n  return Theme.LIGHT;\n};\n\n/**\n *  User preferences theme.\n * @returns Light, Dark orAuto.\n */\nexport const userPreferences: () => void | Theme = () => {\n  return app.session?.user?.preferences()?.[packageID] || localStorage.getItem(storageKey);\n};\n\n/**\n * If user prefers Auto, return media theme.\n * @returns Light or Dark.\n */\nexport const preferTheme = () => {\n  const u = userPreferences();\n  if (!u || u === Theme.AUTO) {\n    return mediaPreferences();\n  }\n  return u;\n};\n\n/**\n * Get assets URL.\n * @param t Theme.\n * @returns App data key.\n */\nexport const assetsURL = (t: Theme.DARK | Theme.LIGHT) => {\n  return `${packageID}.assets.${t}`;\n};\n\n/**\n * Set page theme.\n * @param t Theme.\n */\nexport const setStyle = (t: Theme) => {\n  if (t === Theme.AUTO) {\n    t = mediaPreferences();\n  }\n  let link = document.querySelector<HTMLLinkElement>(`link.theme-mode-link`);\n  if (!link) {\n    link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.classList.add('theme-mode-link');\n    document.head.appendChild(link);\n  }\n  link.href = app.data[assetsURL(t)] as string;\n\n  const colorScheme = document.querySelector<HTMLMetaElement>('meta[name=\"color-scheme\"]');\n\n  if (colorScheme) {\n    colorScheme.content = t;\n  } else {\n    const meta = document.createElement('meta');\n    meta.name = 'color-scheme';\n    meta.content = t;\n    document.head.appendChild(meta);\n  }\n\n  document.documentElement.setAttribute('data-theme', t);\n};\n\n/**\n * Update page theme to t, save to localStorage and dispatch event.\n * @param t Theme\n * @param user session user (if exists).\n */\nexport const updateTheme = (t: Theme, user?: User | null) => {\n  localStorage.setItem(storageKey, t);\n  document.dispatchEvent(new CustomEvent(changeEventName, { detail: t }));\n  if (user) {\n    user\n      .savePreferences({\n        [packageID]: t,\n      })\n      .then(() => {\n        setStyle(t);\n      });\n  } else {\n    setStyle(t);\n  }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Page'];","import { extend } from 'flarum/common/extend';\nimport Page from 'flarum/common/components/Page';\nimport { preferTheme, setStyle } from '../common';\n\nextend(Page.prototype, 'oninit', () => {\n  setStyle(preferTheme());\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","packageID","changeEventName","Theme","storageKey","values","flarum","core","compat","mediaPreferences","window","matchMedia","matches","DARK","LIGHT","userPreferences","_app$session","app","user","preferences","localStorage","getItem","preferTheme","u","AUTO","assetsURL","t","setStyle","link","document","querySelector","createElement","rel","classList","add","head","appendChild","href","colorScheme","content","meta","name","documentElement","setAttribute","updateTheme","_user$savePreferences","setItem","dispatchEvent","CustomEvent","detail","savePreferences","then","extend","Page"],"sourceRoot":""}